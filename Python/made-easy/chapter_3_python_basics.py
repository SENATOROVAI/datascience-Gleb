"""Глава 3."""

import pandas as pd

print("Hello World!")

# Сложение
3 + 6

# Умножение
32 * 45

# Деление (возвращает float)
45 / 9

# Деление с остатком (возвращает остаток)
60 % 8

# Деление с остатком (возвращает целую часть)
81 // 4

# Возведение в степень
8**6

# +
# = в питоне обозначает 'присваивание'
# == обозначает равенство

# +
# - \ чтобы не завершать кавычкой строку, а сделать её её частью.
print("doesn't")

# - второй способ сделать то же самое
print("doesn't")
# -

# # Конкатенация и умножение строк.
# Строки можно объединять (склеивать) с помощью оператора + и повторять с по­ мощью оператора *. Запомнить это просто. Оператор + складывает, а оператор * умножает.
# Строки можно индексировать (обращаться к элементам строки по индексу), при этом первый символ имеет индекс О. Отдельного типа для данных символов не существует, т. к. символ - это просто строка длиной в один символ.
# Помимо индексирования строк также поддерживаются срезы. Если индексирование используется для извлечения отдельных символов, то срез возвращает подстроку.

letter1 = "r"
letter2 = "a"
concat = letter1 + letter2
repetition = letter1 * 7
concat, repetition

# # Индексирование
#
# Строки можно индексировать (обращаться к элементам строки по индексу), при этом первый символ имеет индекс О. Отдельного типа для данных символов не существует, т. к. символ - это просто строка длиной в один символ.

# Индексы букв в строке 'Python'
indexes = {
    "P": [0, -6],
    "y": [1, -5],
    "t": [2, -4],
    "h": [3, -3],
    "o": [4, -2],
    "n": [5, -1],
}
python_index = pd.DataFrame(indexes)
python_index

# # Срезы
#
# Помимо индексирования строк также поддерживаются срезы. Если индексирование используется для извлечения отдельных символов, то срез возвращает подстроку.

word = "Python"
word[2:5]  # Элементы с индексом с 2 до 5

speech = "I love Data Science!"
len(speech)  # возвращает длину строки

# # Синтаксис кода Python
#
# Строки, написанные в исходном коде для выполнения, называются **выражениями** (рис. 3 .6), которые могут состоять из операторов разных типов, таких как оператор присваивания, условный оператор, оператор цикла и т. д. Все они нужны для того, чтобы пользователь мог получить нужный результат.
#
# Выражения могут быть однострочными или многострочными. Многострочные выражения можно переносить на другие строки с помощью круглых скобок ( ) , фигурных скобок {}, квадратных скобок [], обратной косой черты (\). Если програм­мисту нужно выполнить длинные вычисления, а выражение не помещается в одну строку, эти символы помогут выйти из ситуации.

# ![image.png](attachment:image.png)
#

# В Python конец строки означает конец выражения. Но мы также рассмотрели, как написать выражение в нескольких строках.
# Можно также завершить выражение с помощью точки с запятой (;). Иногда за счет этого можно размещать нескольких выражений в одной строке, например:
# flag = 2; ropes = 3; pole = 4
#

# # Переменные и присваивание значений
#
# Переменная - это некоторое имя, связанное со значением. Обратите внимание, что переменная лишь ссылается на зна­чение, которое ей присвоено, но не тождественна ему. Когда переменной присваи­вается другое значение, старое присвоение сразу становится недействительным. Оператор присваивания позволяет автоматически создавать новые переменные и присваивать им значения.

# переменной а присваиваем значение
number45 = 45
# и выводим значение переменной на экран
print(number45)

# Нельзя использовать в качестве имен переменных ключевые слова Python:
# and, def, ехес, if, not, return, assert, del, finally, import, or, try, break, elif, for, in, pass, while, class,  else, from, is, print, yield, continue, except, global, lamЬda, raise

# # Выполнение выражений
# Выражение- это совокупность значений, переменных и операторов. Когда вы вводите в командной строке выражение, интерпретатор вычисляет его и выводит результат.
# Когда интерпретатор Python выводит значение выражения, он использует тот же формат, который вы использовали бы для ввода значения. Для строк это означает, что будут выведены кавычки. Но если вы используете функцию print ( ) , Python отображает содержимое строки без кавычек.

# Аргументы - это все, что мы передаем в функцию. Например, в функцию print ( ) мы передавали строку или переменную - это и есть аргументы. Если при опреде­ лении функции вы хотите передавать ей больше одной переменной, но еще не знае­ те точно, сколько аргументов у вас будет, можно указать специальный синтаксис *args.
#
# Именованные аргументы - это аргументы, для которых при передаче в функцию указывается не только значение, но и имя. (параметры функции)

# # Практические задания

# 1. Напишите программу,
# в которой бы соединялись ваши имя и фамилия.
# Между ними должен быть пробел.
name = "Antonio"
surname = "Vivaldi"
print(name, surname, sep=" ")

# +
# 2. Прямоугольник имеет длину length
# и высоту height. Напишите код для вы­числения площади
# прямоугольника с высотой 8 и длиной 23.
# В коде должно быть присвоение значений переменным 1 и h
# , чтобы один и тот же код можно было использовать повторно.
# Для вычисления площади
# прямоугольника нужно его длину умножить на высоту.

length = 23
height = 8
area = length * height
area
# -

# 3. Чему равен квадрат числа 32 и куб числа 27?
# Напишите оператор, который от­ветит на этот вопрос.
# Ответ: -оператор **
32**2, 27**3

# +
# 4. Напишите приведенное ниже уравнение на Python.
# Присвойте числовые значе­ния переменным и вычислите результат.
# -

# ![image.png](attachment:image.png)

number1 = 4
number2 = 74
sqrd_sum = (number1 + number2) ** 2
expectation = number1**2 + number2**2 + 2 * number1 * number2
sqrd_sum, expectation
if sqrd_sum == expectation:
    print("correct")
else:
    print("incorrect")

# 5. Найдите длину своего имени,
# написав однострочный код на Python.
len("Antonio Vivaldi")

# 6. Нарисуйте прямоугольник, используя функцию print().
print("_ _ _")
print("|   |")
print("|   |")
print("|   |")
print("|   |")
print("|   |")
print("|   |")
print("¯ ¯ ¯")

# 7. Нарисуйте букву «Р» с помощью
# простейшей геометрии и функции print().
print("_ _ _ _")
print("|      |")
print("|      |")
print("|      |")
print("|¯ ¯ ¯ ¯")
print("|")
print("|")
print("¯")

# 8. Создайте переменную Name и
# присвойте ей свое имя. Переменной Age присвойте
# свой возраст. Затем напишите оператор print(),
# который выведет текст «меня зовут Name, а мой
# возраст - Age», с подставленными значениями
# ваших перемен­ ных. Значения Name и Age должны
# быть строкой и числом соответственно.
Name = "Antonio"
Age = 25
print("Меня зовут", Name, "а мой возраст -", Age)

# 9. Исправьте синтаксическую ошибку в следующих строках кода:
#
# words = [cat, window, defenestrate]
#
# for w in words:
#
# print(w, len(w))

words = ["cat", "window", "defenestrate"]
for word in words:
    print(word, len(word))

# 1О. Исправьте синтаксическую ошибку в следующих строках кода:
#
# а, Ь = О, 1
#
# while а < 15:
#
# а, Ь = Ь, а + Ь
#
# print(a, end=',')
#

# +
# 1О. Исправьте синтаксическую ошибку в следующих строках кода:

num1, num2 = 0, 1

while num1 < 15:
    num1, num2 = num2, num1 + num2

print(num1, end=",")
