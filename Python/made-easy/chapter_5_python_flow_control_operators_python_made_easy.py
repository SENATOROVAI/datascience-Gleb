# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.16.4
#   kernelspec:
#     display_name: base
#     language: python
#     name: python3
# ---
"""Глава 5."""


# # Операторы управления потоком в Python.

# ![image.png](attachment:image.png)

# # Операторы if
#
# **Простой оператор if**
#
# Оператор if используется для проверки условия и, если условие истинно,  выполня­ется связанный с оператором блок кода (называемый блоком if).
#
# **Оператор if-else**
#
# else срабатывает, если условие в блоке if не выполнилось.
#
# Как и ранее, оператор if проверяет условие: если условие истинно, запускается блок if, в противном случае выполняется другой блок операторов (называемый блоком else). При этом блок else не является обязательным.
#
# **Оператор if-elif-else**
# Добавляется необязательный блок elif, который является добавочным условием, допуском к проверке на которое является if. Блоков elif может быть сколько угодно, а блок else все так же является необязательным.
#
# # Оператор цикла for
#
# Циклы в программировании используются для многократного выполнения опреде­ленного блока кода. Цикл for в Python выполняет итерацию по элементам переданной последовательности (списка или строки) в том порядке, в котором они в этой последовательности представлены.
#
# Этот синтаксис похож на описание на английском языке и переводится как «для [каждого] значения, в списке». Это одна из тех синтаксических конструкций, кото­ рые приближают Python к разговорному языку.
#
# **Цикл for с блоком else**
#
# В цикле for также может быть необязательный блок else. Блок else выполняется, когда элементы в последовательности, перебираемой циклом for, заканчиваются.
#
# **Функция range()**
# Генерирует арифметическую прогрессию с шагом 1 по умолчанию и с возможностью указания границ этой последовательности. При этом верхняя указанная граница последовательности не является ее частью
#
# Зачастую объект, возвращаемый функцией range(), ведет себя очень похоже на спи­сок, но это не так.
#
# Это объект, который поочередно возвращает элементы переданной ему последова­тельности, когда вы перебираете его, но при этом сам список не создается, экономя память.
# Подобные объекты называются итерируемыми, т. е. их можно обрабатывать с по­мощью функций и конструкций, которые ожидают получить тип данных, у которо­го можно перебрать элементы, пока они не закончатся.
# Мы видели, что оператор for именно так и работает. Есть еще одна функция list(), которая создает списки из итерируемого объекта.
#
# # Цикл while
#
# Цикл while используется для перебора блока кода, пока выполняется заданное условие. Цикл while обычно используется в тех случаях, когда мы не знаем, сколько раз придется выполнить цикл.
#
# # Операторы break и continue
#
# Оператор break прерывает выполнение самого внутреннего цикла for или while.
#
# Оператор continue используется для пропуска части кода внутри цикла в пределах текущей итерации. Цикл не завершается, а сразу переходит на следующую итерацию

# # Практическая часть

# 1. Трейдер хочет, чтобы программа
# проверяла, получил ли он
# прибыль или убы­ток
# по сделке. Напишите программу,
# в которой с
# клавиатуры вводится цена по­купки
# и продажи, а в ответ программа
# сообщает, получил ли трейдер прибыль или убыток.
# Программа также должна рассчитать
# сумму прибыли или убытка.


def lesion_or_income(purchase_price: float, sell_price: float) -> None:
    """подсчитывает доход и убыток трейдера."""
    total: float = sell_price - purchase_price
    if total < 0:
        print("Your lesion is:", total)

    print("Your income is:", total)


lesion_or_income(3434324, 28742819)


# 2. Напишите программу, которая проверяет, является ли год, введенный с клавиа­туры, високосным.
#
#
# Первым високосным годом считается -45 год до нашей эры, и согласно юлианскому календарю начиная с 4 года нашей эры все високосные года становятся четными. Високосным считается каждый четвертый год. Давайте напишем программу, лимит которой будет 3000 год.
#
# Исходя из этого, напишем функцию:


def year(num_year: int) -> None:
    """Проверяет года на високосность."""
    if num_year in list(range(4, 3001, 4)):
        print(num_year, "является високосным")
    print(num_year, "не является високосным")


year(2024)


# 3 . Трое сотрудников, Самир, Правин и Мохит, вводят свой опыт работы с клавиа­туры. Напишите программу, которая определяет наиболее и наименее опытного из них.


# +
def exp(samir: int, pravin: int, mohit: int) -> None:
    """Определяет, кто имеет наибольший и наименьший опыт."""
    listed = {"samir": samir, "pravin": pravin, "mohit": mohit}
    max_key = max(listed, key=lambda k: listed[k])
    min_key = min(listed, key=lambda k: listed[k])
    print(max_key, " - наибольший опыт,", min_key, " - наименьший опыт")


# Пример использования
exp(5, 10, 3)
# -

exp(12, 4, 6)


# 4. Сумма трех углов треугольника составляет 180 . Напишите программу, которая проверяет, является ли фигура треугольником, если в качестве входных данных вводятся три угла.


def triangle(angle_a: float, angle_b: float, angle_c: float) -> str:
    """проверяет существование треугольника исходя из его углов."""
    if angle_a + angle_b + angle_c == 180:
        return "exists"

    return "does not exist"


triangle(60, 60, 60)


# 5. Даны три угла треугольника. Напишите программу, которая проверит, является ли он прямоугольным (один из углов должен составлять 90°).


def triangle90(ang_a: float, ang_b: float, ang_c: float) -> str:
    """Проверяет, является ли треугольник прямоугольным."""
    if 90 in [ang_a, ang_b, ang_c]:
        return "the triangle is right"

    return "the triangle is not right"


triangle90(90, 45, 45)

# 6. Сколько разных трехзначных чисел можно получить, используя цифры 1, 2 и 3 в разных позициях? Напишите программу для генерации всех таких чисел (под­сказка: используйте цикл for).

nums: list[int] = [1, 2, 3]
for dig1 in nums:
    for dig2 in nums:
        for dig3 in nums:
            print(str(dig1) + str(dig2) + str(dig3))


# 7. Напишите код для вывода таблицы умножения любого заданного числа.
#


def multiply(num: int) -> list[int]:
    """Возвращает таблицу умножения введенного числа."""
    fin: list[int] = []
    for number in range(1, 11):
        fin.append(num * number)
    return fin


multiply(7)

# 8. Напишите программу для вывода всех простых чисел от 1 до 500.

for Num in range(1, 501):
    div_list: list[int] = []
    for divisor in range(1, Num + 1):
        if Num % divisor == 0:
            div_list.append(divisor)
    if div_list == [1, Num]:
        print(Num)
        div_list = []
    else:
        div_list = []
        continue

# 9. Выведите все числа, кратные 9, которые меньше 300 (подсказка: вы можете ис­пользовать функцию range()).

for amount in range(1, 300):
    if amount % 9 == 0:
        print(amount)
    else:
        continue

# 10. Машина в течение срока службы приносит годовой доход в размере 200 000 руб.
# Сама она стоит 1 000 000 руб. в момент покупки и продается за 250 000 руб. при утилизации. Вложив ту же сумму в другие инвестиционные инструменты, можно заработать 8 % годовых. Каков минимальный срок службы машины, при котором она станет более привлекательной по сравнению с альтернативными инвестициями?

# +
car_price = 1000000  # начальная стоимость машины
resale_price = 250000  # стоимость при продаже
annual_income = 200000  # годовой доход от машины
rate = 0.08  # процент альтернативных инвестиций
n_value = 0

while True:
    # доход от машины
    car_income = annual_income * n_value + resale_price

    # доход от альтернативных инвестиций
    investment_income = car_price * (1 + rate) ** n_value

    if car_income > investment_income:
        break

    n_value += 1  # счетчик лет

print("Минимальный срок службы машины:", n_value, "лет")
