"""Глава 4."""

import keyword

# # Переменные
#
# Переменные в Python - это просто указатели. Сами по себе они не имеют значе­ний, а просто указывают на объект, который им присвоен. Значения переменных могут меняться. То есть вы можете хранить что угодно в переменной.
#
# # Оператор присваивания
#
# Когда мы вводим переменную вида х = 38, то в этой записи х - это имя перемен­ ной, (=) - это оператор присваивания, а 38 - это присвоенное значение.
# Здесь, в отличие от арифметики, знак (=) не означает «равно». Он означает «при­ своить». В Python «равно» записывается как ==.
#
# # Имена переменных
#
# ♦ Имена переменных могут содержать только буквы, цифры и нижние подчерки­вания.
# ♦ Несмотря на то что числа использовать можно, имя не должно начинаться с чис­ла. Имя 5fingers недопустимо.
# ♦ В имени нельзя использовать пробелы. Имя sales data недопустимо. Зато можно написать sales_data.
# ♦ Имена чувствительны к регистру. Sales и sales - это две разные переменные.
# ♦ Наконец, имена переменных не могут совпадать с ключевыми словами. Эrо за­ резервированные слова, которые для интерпретатора Python имеют особый смысл, например and, break и try.
#
#
#
#

# Чтобы получить список ключевых слов,
# можно запустить вот такой код, который и
# выведет список ключевых слов.
print(keyword.kwlist)

# # Структура программы
#
# ♦ Программы состоят из модулей.
#
# ♦ Модули содержат выражения.
#
# ♦ Выражения содержат операторы.
#
# ♦ Операторы создают и обрабатывают объекты.
#
# # Объекты
#
# В Python все данные становятся объектами. Объекты могут быть либо встроенны­ми, которые есть в Python изначально, либо мы создаем их сами с помощью классов Python.  В Python все является объектом, будь то простые числа или выполняемые над ними операции. Для скрипта Python все эти вещи являются объ­ектами.
#
# **Классификация объектов**
#
# Объекты делятся по типу данных на:
# ♦ встроенные;
#
# ♦ пользовательские.
#
# Типы данных также бывают:
#
# ♦ изменяемые;
#
# ♦ неизменяемые.

# ![image.png](attachment:image.png)

# # Преимущества встроеных типов
#
# Поскольку в Python есть мощные встроен­ные типы данных, в большинстве случаев необходимость самому писать реализа­цию объекта отсутствует.
#
# ♦ встроенные типы данных упрощают написание программ;
#
# ♦ встроенные типы - это компоненты расширений;
#
# ♦ встроенные типы часто более эффективны, чем пользовательские структуры данных;
#
# ♦ встроенные типы данных являются стандартной частью языка.
#
# # Идентификаторы, значения и типы объектов
#
# Объект можно представить как сочетание трех вещей:
# ♦ идентификатор;
#
# ♦ тип данных;
#
# ♦ значение.
#
# У каждого объекта есть идентификатор, тип и значение.
#
# Идентификатор объекта после его создания никогда не меняется. Это адрес объекта в памяти. В Python идентификатор объекта (или его адрес в памяти) представлен числом. Его можно посмотреть с помощью функции id().
#
# Тип объекта определяет операции, которые объект поддерживает, а также возмож­ ные значения для объектов этого типа. Функция type ( ) возвращает тип объекта. Как и идентификатор, тип объекта также нельзя изменять.
#
# # Изменяемые и неизменяемые объекты
#
# Объекты, значение которых может меняться, называются изменяемыми, а объекты, значение которых после создания остается постоянным, называются неизменяемыми.
# Объекты, содержащие ссылки на другие объекты называются контейнерами (кортежи, списки, словари).
#
# # Иерархия типов
#
# # Встроенные константы
#
# **None**
#
# У этого типа данных одно-единственное значение. И есть только один объект с таким значением. Доступ к этому объекту осуществляется через встроенное имя None. Он используется для обозначения отсутствия значения, например воз­ вращается из функций, которые ничего явно не возвращают. В логическом смысле эквивалентен False.
#
#
# **Notimplemented**
# У этого типа одно-единственное значение. И это единственный объект с таким значением. Доступ к этому объекту осуществляется через встроенное имя Notimplemented. Числовые методы и методы сравнения должны возвращать этот объект, если они не реализуют операцию для предоставленных операндов. В ло­гическом смысле эквивалентен True.
#
#
# **Ellipsis**
# У этого типа одно-единственное значение. И это единственный объект с таким значением. Доступ к этому объекту осуществляется через литерал . . . или встро­енное имя Ellipsis. В логическом смысле эквивалентен True.
#
# # Числовые типы
#
#
# **Целые числа (int)**
#
# Это целые числа в неограниченном диапазоне, зависящем только от доступной (виртуальной) памяти. Для операций сдвига и маски используется двоичное представление, а отрицательные числа представлены в дополнительном коде, что создает иллюзию бесконечной строки знаковых битов, простирающейся влево.
#
#
# **Логические значения**
#
# Единственными логическими объектами являются тrue и False, представляющие логические значения. Логический тип является подтипом целочисленного, т. к. логические значения ведут себя как значения О и 1 почти во всех случаях, за ис­ ключением того, что при преобразовании в строку возвращаются строки "True" и "False" соответственно.
#
# **Вещественные числа (float)**
#
#
# Это числа с плавающей точкой двойной точности машинного уровня.
#
#
# **Комплексные числа (complex)**
#
# Комплексные числа представляются как пара чисел с плавающей точкой двой­ной точности машинного уровня. Ограничения те же, что и у чисел с плавающей запятой. Действительную и мнимую части комплексного числа z можно полу­чить с помощью атрибутов z.real и z.imag.
#
#
# # Последовательности
#
# Это конечные упорядоченные множества с индексацией неотрицательными числа­ ми. Встроенная функция len ( ) возвращает количество элементов последователь­ности. Последовательности также поддерживают операции срезов.
#
#
# # Неизменяемые последовательности
#
# Неизменяемые последовательности не могут быть изменены после создания. Если объект содержит ссылки на другие объекты, то эти другие объекты могут изме­няться, но коллекция объектов, на которые ссылается эта неизменяемая последо­вальность, измениться не может.
#
#
# **Строки**
#
# Строка- это последовательность значений, кодируемых таблицей Unicode. В Python нет типа char, а символы представляются как строки длиной 1.
#
#
# **Кортежи (tuple)**
#
# Элементами кортежа могут быть любые объекты Python. Кортеж из двух или более элементов формируется из списка выражений, разделенных запятыми.
#
#
# **Байтовые строки (bytes)**
# Объект типа bytes - это неизменяемый массив. Его элементы представляют со­ бой 8-битные числа х, такие что о <= х < 256. Для создания байтовых строк мож­ но использовать байтовые литералы (например, Ь'аЬс') или встроенный конструктор bytes ( ) . Кроме того, байтовые строки можно декодировать в строки с помощью метода decode().
#
#
# # Изменяемые последовательности
#
#
# **Списки(list)**
#
# Элементами списка могут быть произвольные объекты Python. Списки форми­руются путем передачи списка выражений, разделенных запятыми, заключенно­го в квадратные скобки.
#
#
# **Байтовыемассивы(byte.array)**
#
#
# Объект bytearray - это изменяемый массив. Такие массивы создаются встроен­ ным конструктором bytearray(). Кроме того, что байтовые массивы являются изменяемыми (и, следовательно, нехешируемыми), у них тот же интерфейс и функциональность, что и у неизменяемых байтовых объектов.
#
# **Множества**
#
# Множества - это неупорядоченные конечные наборы уникальных неизменяемых объектов. Множества не индексируются, но можно перебирать их элементы в цик­ле , а встроенная функция len() возвращает количество элементов в наборе.
# Обычно множества используются для быстрой проверки вхождения элемента, уда­ления дубликатов из последовательности и вычисления математических операций над множествами, таких как пересечение, объединение, разность и симметричная разность.
#
#
# **Есть два типа множеств:**
#
# **Set - множество**
#
# Это изменяемые множества. Они создаются встроенным конструктором set()
# и впоследствии могут быть изменены некоторыми методами, такими как add().
#
# **Замороженные множества (frozenset)**
#
# Это неизменяемые множества. Они создаются встроенным конструктором frozenset(). Поскольку этот тип является неизменяемым и хешируемым, его можно включать в другие множества или использовать в качестве ключа сло­ варя.
#
# # Сопоставления
#
# Сопоставления представляют собой конечные наборы объектов, индексированных произвольными индексами. Обращение вида а[k] позволяет выбрать из сопоставле­ния а элемент с индексом k. Этот синтаксис можно использовать в выражениях, в операторах присваиваний и в операторах del. Встроенная функция len() возвра­щает количество элементов в сопоставлении.
#
# **Словари(dict)**
#
# Словарь представляет собой конечный набор объектов с почти произвольными индексами (ключами). В качестве ключей можно использовать все типы, кроме типов вроде списков или других словарей, которые являются изменяемыми и сравниваются по значению, а не по идентификатору объекта. Все дело в том, что для эффективной реализации словарей требуется, чтобы хеш-значения ключей не менялись. Числовые типы, используемые в качестве ключей, подчиняются обычным правилам числового сравнения: если два числа являются равными (на­ пример, 1 и 1 .0), то они оба могут использоваться для индексации одного и того же элемента словаря.
#
# # Вызываемые типы
#
# Это типы объектов, к которым может применяться операция вызова функции:
#
# ♦ **Встроенные функции**
#
# **Функция** - это блок кода, который запускается только при ее вызове. В функ­цию можно передавать параметры. В конце выполнения функция может вернуть какие-то данные. Примеры встроенных функций: len() и math.sin() (math - это стандартный встроенный модуль). Чтобы вызвать функцию, нужно написать имя функции, а за ним круглые скоб­ ки. Например, len ( ) - это функция, которая возвращает длину строки.
#
# ♦ **Пользовательские функции**
#
# Пользовательская функция создается с помощью определения функции (под­ робнее об этом в следующих главах). Функция вызывается со списком аргумен­тов, в котором должно быть то же количество
#
# ♦ **Методы**
#
# Метод экземпляра объединяет класс, экземпляр класса и любой вызываемый
# объект (обычно пользовательскую функцию).
#
# ♦ **Встроенные методы**
#
# На самом деле это то же самое, что и встроенные функции. Метод в Python по­ хож на функцию, за исключением того, что он относится к объекту. Вызывая метод объекта, мы, вероятно, вносим в этот объект изменения. Таким образом, метод принадлежит классу. Примером является метод добавления элемента в список append().
#
# ♦ **Классы**
#
# Классы относятся к вызываемым объектам и объединяют в себе данные и функ­циональность. Создание нового класса позволяет создать новый тип объектов, а в дальнейшем и новые экземпляры этого типа. Каждый экземпляр класса хранит атрибуты, определяющие его состояние. Экземпляр класса также может иметь
# методы (определяемые этим классом), изменяющие его состояние.
#
# ♦ **Модули**
#
# В целом модуль - это то же самое, что и библиотека кода, т. е. файл с набором функций, которые вы хотите добавить в свое приложение. Чтобы создать модуль, достаточно лишь сохранить нужный код в файле с расширением ру.
#
# После этого вновь созданный модуль можно импортировать с помощью оператора
# import.
#
# Модуль может содержать функции, а также переменные всех типов (массивы, сло­вари и т. д.).
#
# Модули являются базовым элементом кода Python и создаются с помощью опера­ тора import или при вызове таких функций, как importlib.import_module() или import().
#
# # Операции с объектами в  Python

# ![image.png](attachment:image.png)

# ![image.png](attachment:image.png)

# ![image.png](attachment:image.png)

# ![image.png](attachment:image.png)

# # Операторы идентификации и вхождения
#
# ♦ Операторы идентификации проверяют идентичность двух объектов.
#
# **• is**
#
# Если если х - это тот же объект, что и у, выражение возвращает True. В про­тивном случае возвращается False.
#
# **• is not**
#
# Если х не является тем же объектом, что и у, выражение возвращает True.
# В противном случае возвращается False.
#
# ♦ **Операторы вхождения** проверяют, является ли данный объект элементом дан­ ной коллекции. Под «коллекцией» понимается последовательность или структу­ра данных, например строка, список, кортеж и т.д.
#
# **• in**
#
# Если х является элементом коллекции у, то возвращается True, в противном случае возвращается False.
#
# **• not in**
#
# Если х не является элементом коллекции у, возвращается True, в противном случае возвращается False.
#
# # Отступы
#
#  большинстве других языков программирования отступы используются лишь для того, чтобы код выглядел красиво. В Python же они опре­ деляют, к какому блоку кода принадлежит выражение.
# В большинстве языков программирования, таких как С, С++, Java, для выделения блока кода используются фигурные скобки{}. В Python для этого используются отступы.
#
# # Комментарии
#
# Делают код более читаемым
#
# # Порядок выполнения
#

# https://drive.google.com/file/d/1NDcILEtADYlBmDg4D0W60bvxrP4H_xMK/view?usp=share_link

# # Динамическая типизация
#
# В Python значение, на которое указывает переменная, имеет определенный тип данных, но сама переменная не имеет строгого типа. Вы можете повторно исполь­зовать одну и ту же переменную, передавая ей ссылку на объект уже другого типа. Переменные можно считать «ярлыками», связанными с объектами.
#
# # Строгая типизация
#
# Для некоторых операций требуются аргументы определенного типа.
#
# # Логическая и физическая строка
#
# Физическая строка кода - это то, что вы буквально видите на экране, когда пише­те программу. Логическая строка - это то, что Python считает единым выпол­няемым выражением. Python неявно предполагает, что каждая физическая строка соответствует логической строке.
#
#
