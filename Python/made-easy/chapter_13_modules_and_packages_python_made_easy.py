"""Глава 13."""

# # Модули
# Если вы выйдете из интерпретатора Python и затем откроете его снова, все напи­санные вами ранее определения (функции и переменные) будут потеряны. Следо­ вательно, если вы хотите написать более длинную программу, вам лучше использо­вать текстовый редактор (например, Блокнот (Notepad) или любое другое про­граммное обеспечение), в нем подготовить код для интерпретатора и запускать этот файл. Это называется написать скрипт.
#
# По мере того как ваша программа будет расти, вы захотите разделить ее на не­ сколько файлов для облегчения дальнейшей работы.
#
# Кроме того, можно использовать написанную ранее функцию в нескольких своих программах, не копируя ее определение каждый раз.
#
# Для обеспечения такой функциональности в Python можно поместить определения в отдельный файл и использовать их в скриптах или в интерактивном режиме интерпретатора. Такой файл называется модулем. Определения из модуля можно импортировать в другие модули или в основной модуль.
#
# Модуль - это файл, содержащий определения и инструкции Python. Имя такого файла состоит из имени модуля и расширения ру.
#
# В программировании модулем называется часть программного обеспечения с опре­деленной функциональностью. Например, при создании видеоигры один модуль будет отвечать за логику игры, а другой - за отрисовку игры на экране. Каждый модуль - это отдельный файл, который можно редактировать независимо.
#
# **Подробнее о модулях**
#
# Кроме определений функций, модуль может содержать исполняемые инструкции. Эти инструкции предназначены для инициализации модуля. Они выполняются только один раз при импорте модуля с помощью оператора import.
#
# Определение функции тоже является «инструкцией», которая при выполнении до­бавляет имя функции в пространство имен модуля.
#
# У каждого модуля есть свое пространство имен, общее для всех его функций. Таким образом, вы можете использовать в модуле глобальные переменные, не бес­ покоясь о случайных конфликтах имен с глобальными переменными во всей программе
#
# # Импорт модулей
#
# **Импорт модулей из других модулей**
#
# Модули могут импортировать и другие модули, которые будут использоваться в его коде.
#
# **Импорт имен из модуля напрямую**
#
# через from:
# from typing import Dict
#
# Импорт всех имен мз модуля разом:
# from typing import *
#
# При этом импортируются все имена, кроме начинающихся с подчеркивания _
# В большинстве случаев программисты Python не используют эту возможность, по­ скольку она вводит в интерпретатор неизвестный набор имен, которые могут пере­ определить что-то из того, что вы уже определили ранее. Кроме того, это порожда­ет плохо читаемый код. Однако импорт через символ (*) можно использовать для экономии времени в интерактивных сессиях.
#
# **Импорт модуля под другим именем**
#
# import numpy as np
#
# # Стандартные модули Python
#
# В Python есть встроенная библиотека стандартных модулей, описанная в отдельном документе Python Library Reference (далее «Справочник по стандартной библиоте­ке»). Некоторые модули встроены в интерпретатор, и они предоставляют операции, которые не являются частью ядра языка, но тем не менее встроены по умолчанию для повышения эффективности или для доступа к основным средствам операцион­ной системы, таким как системные вызовы. Этот набор модулей зависит от конфи­гурации и от базовой платформы. Например, модуль winreg предоставляется только в системах Windows.
#
# # Встроенная функция dir()
#
# Функция dir() позволяет узнать имена, встроенные в переданном ей модуле
#
# # Пакеты
#
# Пакет - набор модулей
#
# Папка пакеты должна содержать файл с именем __init__.py, чтобы Python определял ее как пакет. Это файл содержит код инициализации пакета.
#
# Пакеты - это способ структурировать пространство имен модулей Python с помощью точечной нотации. Например имя A.B обозначает подмодуль B в пакете A
#
# Пример иерархии:

# ![image.png](attachment:image.png)

# # Популярные пакеты в Python.
#
# **Сбор данных**
#
# **Scrapy**
#
# Это одна из самых популярных библиотек Python для работы с данными, помогает создавать программы сканирования (ботов) для извлечения из Интернета структу­рированных данных, например URL-aдpeca или контактную информацию. Это от­ личный инструмент для сбора данных, который используется, например, в моделях машинного обучения Python.
# Разработчики используют эту библиотеку для сбора данных из API. Этот фрейм­ворк написан по принципу Don't Repeat Yourself (DRY, «не повторяйся»). Такой инструмент вдохновляет пользователей на написание универсального кода, ко­торый можно повторно использовать для создания и масштабирования больших поисковых роботов.
#
# **Обработка данных и моделирование**
#
# **NumPy**
#
# NumPy (Numerical Python)- идеальный инструмент для научных вычислений и выполнения простых и более сложных операций над массивами.
# В этой библиотеке вы найдете множество удобных функций, выполняющих опера­ ции с п-мерными массивами и матрицами в Python. Библиотека помогает обрабаты­вать массивы, в которых хранятся значения одного типа, и упрощает выполнение математических операций над массивами (и их векторизацию). Фактически векто­ризация математических операций над массивом типа NumPy увеличивает произ­водительность и ускоряет время выполнения.
#
# **SciPy**
#
# Эта полезная библиотека содержит модули для выполнения вычислений из линей­ ной алгебры, интегрирования, оптимизации и статистики. Ее основная функцио­нальность была построена на NumPy, поэтому вычисления с массивами она тоже поддерживает. SciPy отлично подходит для всех видов проектов научного про­граммирования (в сфере естествознания, математики и инженерии). В библиотеке есть эффективные численные процедуры, такие как численная оптимизация, интег­рирование и другие функции. Большое количество подробной документации упро­щает работу с библиотекой.
#
# **Pandas**
#
# Эта библиотека создана с целью помочь разработчикам в обработке «маркирован­ных» и «реляционных» данных. Работа библиотеки опирается на две основные структуры данных: Series (одномерный список элементов) и DataFrame (двумерная структура вроде таблицы с несколькими столбцами). Pandas позволяет преобразо­вывать структуры данных в объекты DataFrame, обрабатывать отсутствующие дан­ные, добавлять/удалять столбцы из DataFrame, вводить отсутствующие файлы и строить графики и гистограммы. Библиотека применяется для обработки и визуа­лизации данных.
#
# **Scikit-learn**
#
# Это отраслевой стандарт для проектов Data Science, написанных на Python. Scikit­-learn - это группа пакетов в SciPy Stack, которые были созданы для конкретных задач, например, для обработки изображений. В Scikit-learn для выполнения мате­матических операций используется библиотека SciPy, предоставляющая удобный интерфейс для наиболее распространенных алгоритмов машинного обучения.
# Специалисты по данным используют эту библиотеку для выполнения стандартных задач машинного обучения и интеллектуального анализа данных, таких как класте­ризация, регрессия, выбор модели, уменьшение размерности и классификация. А еще библиотека поставляется с качественной документацией и обладает высокой производительностью.
#
# **TensorFlow**
#
# TensorFlow - это популярный фреймворк Python для машинного обучения и глу­бокого обучения, разработанный в Google Brain. Это лучший инструмент для таких задач, как идентификация объектов, распознавание речи и многих других задач. Он помогает в работе с искусственными нейронными сетями, которым необходимо обрабатывать несколько наборов данных. Библиотека включает в себя различные помощники по слоям (tflearn, tf-slim, skflow), которые делают ее еще более функ­циональной. В TensorFlow постоянно появляются новые версии, включая исправ­ления потенциальных уязвимостей безопасности или улучшения интеграции TensorFlow и GPU
#
# **Визуализация данных**
#
#
# **Matplotlib**
#
# Это стандартная библиотека Data Science, которая позволяет визуализировать дан­ ные, такие как двумерные диаграммы и графики (гистограммы, диаграммы рассея­ния и графики в недекартовых координатах). Matplotlib - одна из тех библиотек построения графиков, которые полезны в проектах по Data Science благодаря объектно-ориентированному API для встраивания графиков в приложения.
# Благодаря этой библиотеке Python может конкурировать с такими научными инст­рументами, как МАТLАВ или Mathematica. Однако при использовании этой библиотеки для создания сложных визуализаций разработчикам приходится писать больше кода, чем обычно. Обратите внимание, что популярные библиотеки по­ строения графиков без проблем работают с Matplotlib.
#
# **Seaborn**
#
# Библиотека Seaborn создана на основе Matplotlib и служит полезным инструментом машинного обучения Python для визуализации статистических моделей - тепловых карт и других типов визуализаций, в которых приводится сводка данных и отображаются общие распределения. При использовании этой библиотеки вам доступна широкая галерея визуализаций (включая сложные средства, такие как временные ряды, совместные графики и скрипичные диаграммы).
#
# **Bokeh**
#
# Эта библиотека - отличный инструмент для создания интерактивных и масштаби­руемых визуализаций внутри браузеров с помощью виджетов JavaScript. Библиоте­ка полностью независима от Matplotlib. Она ориентирована на интерактивность и представляет визуализации в современных браузерах аналогично DЗ.js (Data-Driven Documents). В Bokeh есть различные типы графиков, возможности взаимодействия (например, связывание графиков или добавление виджетов JavaScript) и стили.
#
# **Plotly**
#
# Этот веб-инструмент для визуализации данных, в котором уже встроено немало полезной графики, - подробнее вы можете узнать на сайте plotly.com. Библиотека очень хорошо работает в интерактивных веб-приложениях. Ее создатели активно расширяют библиотеку новой графикой и функциями для поддержки нескольких связанных представлений, анимации и интеграции перекрестной интеграции.
