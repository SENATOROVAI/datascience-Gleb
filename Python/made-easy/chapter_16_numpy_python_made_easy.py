"""Глава 16."""

import numpy as np

# # Основные операции над массивами NumPy

d_ = np.array([1, 2])
s_ = np.ones(2)

d_

s_

o_ = d_ + s_
o_

i_ = d_ - s_
i_

u_ = d_**2  # d_ * d_ тоже работает
u_

# +
f_ = np.array([[2, 4, 5, 7], [4, 5, 5, 2]])

y_ = np.array([[2, 3, 5, 9], [4, 2, 5, 8], [19, 25, 5, 2], [9, 12, 8, 3]])

e_ = f_ @ y_  # умножение по правилам линейной алгебры

e_
# -

w_ = e_ * 2
w_

# # Универсальные функции
#
# В NumPy есть стандартные математические функции, такие как синус, косинус и экспонента. В NumPy они называются универсальными функциями (ufunc) и вы­полняются поэлементно, создавая на выходе новый массив
#

# ![image.png](attachment:image.png)

# # Транслирование

# Например, у вас есть массив (назовем его data), содержащий информа­ цию о расстояниях в милях, но вы хотите преобразовать мили в километры. Это делается следующим образом:

w_  # массив с милями

kms = w_ * 1.6
kms

# NumPy понимает, что умножение выполняется над каждым элементом массива. Этот принцип называется транслирование. Транслирование массивов - это меха­низм, который позволяет NumPy выполнять операции над массивами разной фор­мы. Размеры массивов при этом должны быть совместимыми, т. е. размеры по об­щим осям должны совпадать или один из них должен быть равен 1 . Если размеры окажутся несовместимы, вы получите исключение ValueError.

# # Функции агрегирования
#
# В NumPy также есть функции агрегирования. В дополнение к стандарт­ным функциям min(), max() и sum() есть также функция mean() , позволяющая полу­чить среднее значение, prod(), выдающая результат умножения всех элементов, std(), вычисляющая стандартное отклонение, и многие другие.

kms.std()

# # Двумерные массивы

data = np.array([[1, 2], [3, 4]])
data[1, 1]

# В срезе первый элемент это индекс строки, второй - столбца, начинающиеся с 0

w_

j_ = w_[1].std()  # функция агрегирования для 2 столбца
j_

# axis=0 - по столбцам
#
# axis=1 - по строкам

w_.max(axis=0)

# # Уникальные элементы массива

# Найти уникальные элементы в массиве можно с помощью функции np.unique().

g_ = np.array([1, 2, 2, 2, 3, 44, 44, 55, 66, 6])
np.unique(g_, return_index=True)  # возвращает массив уникальных значений
# и их индексов

np.unique(g_, return_counts=True)  # уникльные значения +
# считает сколько каждых значений

# # Транспонирование и изменение формы матрицы

w_

m_ = w_.T
m_

# # Обратный порядок элементов массива
#
# Функция NumPy np.flip() позволяет менять порядок элементов на обратный или «переворачивать» содержимое массива вдоль оси. Функции np.flip() нужно пере­дать массив, который вы хотите перевернуть, и ось. Если вы не укажете ось, NumPy поменяет порядок элементов по всем осям вашего массива.

v_ = np.flip(m_, axis=1)  # переворачиваем только строки

n_ = np.flip(m_, axis=0)  # переворачиваем только столбцы
n_

# # Сжатие многомерного массива в одномерный
#
# Есть два метода - flatten() и ravel(). Разница в том, что flatten возвращает новый массив, а результат ravel является ссылкой на исходный массив, то есть, ravel эффективнее использует память. ravel изменяет исходный массив, а flatten его не изменяет

q_ = w_.flatten()
q_

# # Работа с математическими формулами
#
# Простота реализации математических формул для работы с массивами - одна из причин, благодаря которым NumPy так широко используется в научном сообщест­ве Python.
#
# error = (1/n) * np.sum(np.square(predictions - labels)) # MSE
#
# # Сохранение массива в файл и чтение из файла
#
# В какой-то момент вам может потребоваться сохранить какие-нибудь массивы на диск и загрузить их обратно без повторного запуска кода. В NumPy есть несколько способов сохранять и загружать объекты. Объект ndarray можно сохранять в файл и загружать из файла с помощью функций np.loadtxt() и np.savetxt(), которые рабо­тают с обычными текстовыми файлами, с помощью функций np.load() и np.save(), которые работают с двоичными файлами NumPy с расширением nру, а также есть функция np.savez(), которая сохраняет массивы в файлы NumPy с расширением npz.
# В файлах пру и npz хранятся данные, форма, dtype и другая информация, необхо­димая для восстановления ndarray и позволяющая правильно извлечь массив, даже если файл был создан на другом компьютере с другой операционной системой.
# Если вы хотите записать один объект ndarray, сохраните его как файл nру с по­мощью функции save(). Если вы хотите записать более одного объекта ndarray в одном файле, сохраните их в файл npz с помощью функции savez(). В ы также можете сохранить несколько массивов в один файл в сжатом формате npz с помо­щью функции savez_compressed().
